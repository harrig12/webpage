---
title: How to use UMAPs without getting yelled at 
subtitle: Ok, you might still get yelled at 
image: preview.png
date: may 20, 2024
author: Cait Harrigan
execute:
  warning: false
  message: false
code-fold: true
lightbox: true
toc: true
categories:
  - tips & tools
  - citizen science
  - gradschool
---


Some computational biologists have strong feelings about UMAPs. Often, these are well justified strong feelings, but the reasoning behind them can get mathy quickly. I think UMAPs, like any other visualization tool may be used to support a data story - but you should use them with purpose.

Here, I will explain some intuition behind where I think a UMAP belongs in a paper, and I'll do it with no math. 

My aim is to address uncertain scientists who feel they're creating a UMAP because that's what other papers similar to the one they're trying to write have done. Hopefully be the end of reading you will have confidence in your choice to include, or not include a UMAP in your manuscript.  


::: {.callout-tip}
## TLDR
Treat UMAPs like venn diagrams 
:::


# What is a UMAP

UMAP is an algorithm for dimensionality reduction. In other words, it's a way of spreading out your data in 2D. This is especially useful if your data has more than two dimensions (ie. most biological data)

High dimensional data is challenging to intuit about, but I like to imagine only looking at two axes at a time, and we can spin the data around to get different views of it like a big cube. 


# Minimal example

These two datasets are very different from each other. Can you tell why? 

```{r}
# set up 
library(rgl)
library(umap)
library(ggpubr)
library(cowplot)
library(tidyverse)

cluster_col = c('1' = 'red', '2'='navy', '3'='orange')

df <- tibble(
  x = c(rnorm(1000,0.5,0.25), rnorm(500,1,0.25), rnorm(250,0.75,0.25)),
  y = c(rnorm(1000,0.5,0.25), rnorm(500,1,0.25), rnorm(250,1.25, 0.25)),
  z = c(rnorm(1000,0.5,0.25), rnorm(500,1,0.25), rnorm(250,1,   0.25)),
  Cluster = factor(c(rep('1', 1000), rep('2', 500), rep('3', 250)))
)

# plot two very different datasets

p1 <- df %>%
  ggplot(aes(x=x, y=y, colour = Cluster)) + 
  geom_point(alpha = 0.5) + 
  scale_colour_manual(values = cluster_col) + 
  theme_pubr() + 
  labs(title = "Dataset A") 
  

p2 <- df %>%
  mutate(z = if_else(Cluster == 3, z + 1, z)) %>%
  ggplot(aes(x=x, y=y, colour = Cluster)) + 
  geom_point(alpha = 0.5) + 
  scale_colour_manual(values = cluster_col) + 
  theme_pubr() + 
  labs(title = "Dataset B")

plot_grid(p1,p2)
```


Let's look in 3D - you can drag the blow plots and see that in `Dataset B` the orange cluster is further away from the other two along the z axis. This fact is hidden when we only plot x and y. 

```{r}
# set up row
mfrow3d(nr = 1, nc = 2, sharedMouse = TRUE)  


# plot plain df
plot3d(df$x, df$y, df$z, col=cluster_col[df$Cluster],xlab='x', ylab='y', zlab='z')

# plot mutated df
df2 <- df %>%
  mutate(z = if_else(Cluster == 3, z + 1, z))
plot3d(df2$x, df2$y, df2$z, col=cluster_col[df$Cluster],xlab='x', ylab='y', zlab='z')


# display
rglwidget()
```


Here's the UMAPs

```{r}
# embed df
embedding <- df %>% 
  select(x:z) %>%
  umap()

p1 <- df %>%
  bind_cols(
    embedding$layout %>%
      as_tibble() %>%
      rename_with(~c('umap_1', 'umap_2'))
  ) %>%
  ggplot(aes(x = umap_1, y = umap_2, colour = Cluster)) + 
  geom_point(alpha = 0.5) + 
  scale_colour_manual(values = cluster_col) + 
  theme_pubr() + 
  labs(title = "Dataset A") 


embedding <- df %>% 
  mutate(z = if_else(Cluster == 3, z + 1, z)) %>%
  select(x:z) %>%
  umap()

# embed mutated df
p2 <- df %>%
  mutate(z = if_else(Cluster == 3, z + 1, z)) %>%
  bind_cols(
    embedding$layout %>%
      as_tibble() %>%
      rename_with(~c('umap_1', 'umap_2'))
  ) %>%
  ggplot(aes(x = umap_1, y = umap_2, colour = Cluster)) + 
  geom_point(alpha = 0.5) + 
  scale_colour_manual(values = cluster_col) + 
  theme_pubr() + 
  labs(title = "Dataset B") 

plot_grid(p1,p2)
```

# How did it know!?

UMAP in my analogy and is an algorithm to find a good angle to look from so that you can see in 2D see the placement of the orange points in 3D. Similar to what we're doing above when we drag around that 3D point cloud. 

However in order to accomplish this, it has to squish some things. This is why it's not distance preserving. If we have a cluster labeling, it might give us some idea of which are the overlapping clusters. 


::: {.callout-important}
## Important
Do not do clustering on your UMAP embeddings. Assign cluster labels some other way. (PCA, marker genes, batch, simulation id, etc. may be appropriate choices)
:::

# Use UMAPs like a Venn diagram

I like this metaphor because with a venn diagram you can learn something about your overlapping sets, but the distance between the groups doesn't tell you anything. 

I think it's also true to how UMAPs are often used in practice: we colour by some clustering, then recolour by other interesting features to layer on information about the different clusters presented in the UMAP.

In short, I see the risks of your reader over-interpreting a UMAP as outweighed by what we gain as a community by not having to "get creative" with venn diagrams and petal plots. 

::: {layout-ncol=3}

![[Vandroemme et al. 2013](https://doi.org/10.1186/1471-2164-14-829)](Screenshot 2024-05-20 210730.png)

![[Giorgi Lab blog](https://giorgilaborg.wordpress.com/2019/01/29/7-way-nested-venn-diagrams/)](075_mirnas_7way.png)

![[D’Hont et al. 2012](https://doi.org/10.1038/nature11241)](Screenshot 2024-05-20 211358.png)

:::

These are some beautiful examples, but I have come across many more cursed versions of the gigantic unruly venn diagram. Let's avoid making these if we can. 



# Speedrun: making an attractive UMAP 

## Parameters

There are two parameters which matter to me: `n_neighbors` and `min_dist`. In my head I think of these the “spreadiness” and the “squishiness” parameters respectively. Some UMAP packages call these parameters `a` and `b`. 

Andy Coenen and Adam Pearce have [a fantastic demo](https://pair-code.github.io/understanding-umap/) illustrating how these parameters interact. More or less: `n_neighbors` determines how far away members of different clusters will fall and `min_dist` controls how dense points in the same or similar clusters appear. 

Critically: as the author you pick the parameters. You are in effect drawing a cartoon version of your data, and you are in control of what it looks like. Of course we shouldn't interpret these plots literally! Try to pick your parameters such that the relative sizes of clusters are generally represented by the amount of space they take up in your plot.

On the flip side, it's okay to choose a UMAP that appeals to you and supports the story you are telling. As long as you investigate your hypotheses with other orthogonal analyses, no science crimes have been committed by choosing the nicest looking UMAP. 

## Understand the shape of your data

No matter what shape your data is, UMAP will try to make blobs. Is this a good representation of your data? *It doesn't matter, this is a Venn diagram*. 

*Are you trying to visualize RNA velocity, pseudotime, or other methods which connect clusters together or have some sense of continuity between them?* I suggest you try [PHATE](https://phate.readthedocs.io/en/stable/). This method is similar to UMAP in some ways, but has a tendency to make lines and tree-shapes instead of blobs. If you have a reason to believe that your data is closer to a series of related datapoints, rather than a collection of semi-related clusters, then I think PHATE is a better match for that prior. 


# Conclusions

A UMAP is great for giving a snapshot overview of your dataset, and makes it easy to overlay different information onto the same set of points. Your reader can become familiar with “the red cluster” and build an understanding of what kind of datapoints are in it, and how your other analyses relate to it. 

UMAPs look nice, and have become a standard visual in computational biology, there's no way around this. Despite their limitations, I think we can use them conscientiously as a way to guide a reader through a narrative. At the end of the day, it's hard for most human brains to understand high-dimensional spaces and I think anything that helps us do that can be useful. 

I have suggested you should consider UMAPs like venn diagrams: although even this even this may be a questionable usage... see "Distortion of mixing patterns" in [Chari and Pacter 2023](https://doi.org/10.1371/journal.pcbi.1011288). 

For me, responsible usage involves making sure your claims are supported by data analysis an not only by a UMAP layout. They are good for communicating observations you have made about your data, but not for making said observations. 


